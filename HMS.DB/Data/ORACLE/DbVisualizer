DROP SEQUENCE BUILDING_SEQ;
CREATE SEQUENCE BUILDING_SEQ INCREMENT BY 1 START WITH 21 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
DROP SEQUENCE BUILDING_SEQ1;
CREATE SEQUENCE BUILDING_SEQ1 INCREMENT BY 1 START WITH 81 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
DROP SEQUENCE COLLAGES_SEQ;
CREATE SEQUENCE COLLAGES_SEQ INCREMENT BY 1 START WITH 21 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
DROP SEQUENCE PERMISSIONS_SEQ;
CREATE SEQUENCE PERMISSIONS_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
DROP SEQUENCE ROLEPERMISSION_SEQ;
CREATE SEQUENCE ROLEPERMISSION_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
DROP SEQUENCE SITEUSER_SEQ;
CREATE SEQUENCE SITEUSER_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
DROP SEQUENCE SITEUSER_SEQ1;
CREATE SEQUENCE SITEUSER_SEQ1 INCREMENT BY 1 START WITH 61 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
DROP TABLE BUILDING;
CREATE TABLE BUILDING (ID NUMBER NOT NULL, NAME VARCHAR2(200) NOT NULL, BUILDING_NUMBER NUMBER, COLLEGE_ID NUMBER);
DROP TABLE COLLAGES;
CREATE TABLE COLLAGES (ID NUMBER NOT NULL, NAME VARCHAR2(200), CODE NUMBER, CONSTRAINT COLLAGES_PK PRIMARY KEY (ID));
DROP TABLE HALLS;
CREATE TABLE HALLS (ID NUMBER NOT NULL, NAME VARCHAR2(200), HALL_NUMBER NUMBER, BUILDING_ID NUMBER, CONSTRAINT HALLS_PK PRIMARY KEY (ID));
DROP TABLE PERMISSIONS;
CREATE TABLE PERMISSIONS (ID NUMBER NOT NULL, NAME VARCHAR2(50));
DROP TABLE RESERVATIONS;
CREATE TABLE RESERVATIONS (ID NUMBER NOT NULL, NAME VARCHAR2(200), HALL_ID NUMBER, RESERVATION_DATE DATE, TIME_START DATE, TIME_END DATE, USER_ID NUMBER, CONSTRAINT RESERVATIONS_PK PRIMARY KEY (ID));
DROP TABLE ROLEPERMISSION;
CREATE TABLE ROLEPERMISSION (ID NUMBER NOT NULL, ROLEID NUMBER NOT NULL, PERMISSIONID NUMBER NOT NULL);
DROP TABLE SITEROLE;
CREATE TABLE SITEROLE (ID NUMBER NOT NULL, NAME VARCHAR2(200), NORMALIZEDNAME VARCHAR2(200), DESCRIPTION VARCHAR2(200), CREATED DATE, CONSTRAINT SITEROLE_PK PRIMARY KEY (ID));
INSERT INTO SITEROLE (ID, NAME, NORMALIZEDNAME, DESCRIPTION, CREATED) VALUES 
(2, 'super_admin', 'SUPER_ADMIN', 'system_super_adminstrator', TIMESTAMP '2023-09-12 00:00:00'),
(3, 'user', 'USER', '11111111111111111111', TIMESTAMP '2023-09-12 00:00:00'),
(4, 'supervisor', 'SUPERVISOR', 'supervisor22222', TIMESTAMP '2023-09-15 00:00:00'),
(5, 'test', 'TEST', 'to make some tests in the system ', TIMESTAMP '2023-09-26 00:00:00');
DROP TABLE SITEUSER;
CREATE TABLE SITEUSER (ID NUMBER NOT NULL, USERNAME VARCHAR2(200), FORENAME VARCHAR2(200), SURNAME VARCHAR2(200) NOT NULL, NORMALIZEDUSERNAME VARCHAR2(200), EMAIL VARCHAR2(200) NOT NULL, NORMALIZEDEMAIL VARCHAR2(200) NOT NULL, EMAILCONFIRMED VARCHAR2(5), PASSWORDHASH VARCHAR2(200) NOT NULL, PHONENUMBER VARCHAR2(200) NOT NULL, PHONENUMBERCONFIRMED VARCHAR2(5), TWOFACTORENABLED VARCHAR2(5), CREATED DATE, CONSTRAINT SITEUSER_PK PRIMARY KEY (ID));
INSERT INTO SITEUSER (ID, USERNAME, FORENAME, SURNAME, NORMALIZEDUSERNAME, EMAIL, NORMALIZEDEMAIL, EMAILCONFIRMED, PASSWORDHASH, PHONENUMBER, PHONENUMBERCONFIRMED, TWOFACTORENABLED, CREATED) VALUES 
(41, 'm@m.com', 'moammed gafar', 'moammed gaffar', 'M@M.COM', 'm@m.com', 'M@M.COM', 'false', 'AQAAAAEAACcQAAAAEN8GgjlJ8IJgYNI2tJyOE09eFX8DxR47T3mmHfmacddvdIdTbQGWBHRGcAEN8PZ5+A==', '123421231', 'false', 'false', TIMESTAMP '2023-10-15 00:00:00');
DROP TABLE SITEUSERROLE;
CREATE TABLE SITEUSERROLE (USERID NUMBER NOT NULL, ROLEID NUMBER, CONSTRAINT SITEUSERROLE_PK PRIMARY KEY (USERID));
INSERT INTO SITEUSERROLE (USERID, ROLEID) VALUES 
(41, 2);
DROP PROCEDURE BUILDING_CREATE;
--/
CREATE PROCEDURE BUILDING_CREATE (
BName NVARCHAR2,
BNumber NUMBER,
BCollege_Id NUMBER ,

qres  out NVARCHAR2 
)
AS 
        ident number ;

BEGIN
        SELECT COUNT (*)
        INTO ident FROM BUILDING WHERE (college_id = BCollege_ID AND building_number = BNumber );

        IF        ident = 0
        THEN
                  INSERT INTO building( name , building_number , college_id ) VALUES( BName, BNumber, BCollege_Id);
                   qres := 'success';
        ELSE
                    qres := 'fail';
        END IF;

END BUILDING_CREATE;


/
DROP PROCEDURE COLLAGES_GETALL;
--/
CREATE PROCEDURE COLLAGES_GETALL 
(res out SYS_REFCURSOR)
AS
BEGIN
         OPEN RES FOR SELECT ID,NAME,Code FROM Collages ;
END;




/
DROP PROCEDURE DASHBORD_TODAY_RESERVATIONS;
--/
CREATE PROCEDURE DASHBORD_TODAY_RESERVATIONS ( 
  res out SYS_REFCURSOR
) AS 
BEGIN
  OPEN res FOR SELECT  COUNT(DISTINCT(ID))  AS total from halls;

END DASHBORD_TODAY_RESERVATIONS;




/
DROP PROCEDURE GETHALLS;
--/
CREATE PROCEDURE GETHALLS 
(
  --ID IN NUMBER ,
  
  res out SYS_REFCURSOR
) AS 
BEGIN
    OPEN res FOR SELECT * FROM halls ;

END GETHALLS;




/
DROP PROCEDURE GETHALLSBYID;
--/
CREATE PROCEDURE GETHALLSBYID 
(
  hallid IN NUMBER ,
  
  res out SYS_REFCURSOR
) AS 
BEGIN
    OPEN res FOR SELECT * FROM halls Where id = hallid;

END gethallsbyid;




/
DROP PROCEDURE GET_COLLEGE_BUILDING;
--/
CREATE PROCEDURE GET_COLLEGE_BUILDING 
   (res out SYS_REFCURSOR)
AS
BEGIN
  OPEN RES FOR 
        SELECT Building.ID,Building.Name AS buldingName ,Building.building_Number AS buldingnumber,Collages.Name AS BuldingCollageName
		FROM Building join Collages
		On (Building.College_Id = Collages.ID) ;
END GET_COLLEGE_BUILDING;




/
DROP PROCEDURE GET_HALL_BUILDING;
--/
CREATE PROCEDURE GET_HALL_BUILDING 
(
    res out SYS_REFCURSOR
) AS 
BEGIN
  OPEN res FOR 
    SELECT halls.ID AS Id , halls.NAME AS HallName ,halls.HALL_NUMBER AS HallNumber ,
        Building.Id AS Building_ID, Building.Name AS BuildingName ,Building.BUILDING_NUMBER AS BuildingNumber
	FROM halls JOIN Building
		ON (halls.Building_ID = Building.ID);

END GET_HALL_BUILDING;


/
DROP PROCEDURE IDENTITY_ADDUSERTOROLE;
--/
CREATE PROCEDURE IDENTITY_ADDUSERTOROLE (
  "U_ID" IN NUMBER, 
  "R_ID" IN NUMBER) 
  
  IS
       VarRowNum  NUMBER := 0 ;
BEGIN 
       SELECT COUNT("ROLEID")

       INTO   VarRowNum

	   FROM   SiteUserRole

	  WHERE  UserId = "U_ID" AND RoleId = "R_ID" ;

       IF VarRowNum = 0 THEN
         INSERT INTO SiteUserRole
			(UserId, RoleId	)
			VALUES
			("U_ID","R_ID") ;

       END IF;
END;



/
DROP PROCEDURE IDENTITY_FINDBYEMAIL;
--/
CREATE PROCEDURE IDENTITY_FINDBYEMAIL 
(
  NORUSEREMAIL IN VARCHAR2 ,
  res OUT SYS_REFCURSOR
) AS 
BEGIN

    OPEN res FOR  SELECT * FROM SiteUser
    WHERE NormalizedEmail = NORUSEREMAIL;
END IDENTITY_FINDBYEMAIL;
/
DROP PROCEDURE IDENTITY_FINDBYID;
--/
CREATE PROCEDURE IDENTITY_FINDBYID 
(
  U_ID IN NUMBER,
  res out SYS_REFCURSOR
) AS 
BEGIN
    OPEN res FOR 
        SELECT * FROM SiteUser
        WHERE Id = U_ID;
END IDENTITY_FINDBYID;
/
DROP PROCEDURE IDENTITY_FINDBYNAME;
--/
CREATE PROCEDURE IDENTITY_FINDBYNAME 
(
  normalizedname in varchar2 ,
  res out SYS_REFCURSOR
) as 
begin

OPEN res FOR 
SELECT * FROM SiteUser
    WHERE NormalizedUserName = normalizedname ;

end identity_findbyname;
/
DROP PROCEDURE IDENTITY_FINDROLEBYID;
--/
CREATE PROCEDURE IDENTITY_FINDROLEBYID 
(
  R_ID IN NUMBER,
  res out SYS_REFCURSOR
) AS 
BEGIN
  OPEN res FOR 
    SELECT  *  FROM SiteRole
    WHERE Id = R_ID;

END IDENTITY_FINDROLEBYID;
/
DROP PROCEDURE IDENTITY_FINDROLEBYNAME;
--/
CREATE PROCEDURE IDENTITY_FINDROLEBYNAME 
(
    NorRoleName IN VARCHAR2, 
    res OUT SYS_REFCURSOR
) AS 
BEGIN

    OPEN res FOR SELECT  * FROM SiteRole
    WHERE NormalizedName = NorRoleName;

END IDENTITY_FINDROLEBYNAME;
/
DROP PROCEDURE IDENTITY_GETALLROLES;
--/
CREATE PROCEDURE IDENTITY_GETALLROLES (res out SYS_REFCURSOR) AS

BEGIN
  OPEN RES FOR SELECT SiteRole.Id,SiteRole.Name,SiteRole.Description FROM SiteRole ;
END IDENTITY_GETALLROLES;




/
DROP PROCEDURE IDENTITY_GETALLUSERS;
--/
CREATE PROCEDURE IDENTITY_GETALLUSERS 
(
    res out SYS_REFCURSOR
) AS 
BEGIN
  OPEN res FOR SELECT * FROM SiteUser;
END IDENTITY_GETALLUSERS;
/
DROP PROCEDURE IDENTITY_GETUSERROLES;
--/
CREATE PROCEDURE IDENTITY_GETUSERROLES 
(
  U_ID IN NUMBER,
  res out SYS_REFCURSOR
) AS 
BEGIN
  OPEN res FOR 
    SELECT r.* FROM SiteRole r 
    INNER JOIN SiteUserRole ur ON ur.RoleId = r.Id 
    WHERE ur.UserId = U_ID;

END IDENTITY_GETUSERROLES;
/
DROP PROCEDURE IDENTITY_GETUSERROLESBYUSERID;
--/
CREATE PROCEDURE IDENTITY_GETUSERROLESBYUSERID 
(
  USERID IN NUMBER, 
  res out SYS_REFCURSOR
) AS 
BEGIN
    OPEN res FOR SELECT r.Name FROM SiteRole r 
    INNER JOIN SiteUserRole ur ON ur.RoleId = r.Id 
    WHERE ur.UserId = UserId ;
END IDENTITY_GETUSERROLESBYUSERID;



/
DROP PROCEDURE IDENTITY_INSERTUSER;
--/
CREATE PROCEDURE IDENTITY_INSERTUSER 
(
  USERNAME IN VARCHAR2 
, NORMALIZEDUSERNAME IN VARCHAR2 
, FORENAME IN VARCHAR2 
, SURNAME IN VARCHAR2 
, EMAIL IN VARCHAR2 
, NORMALIZEDEMAIL IN VARCHAR2 
, EMAILCONFIRMED IN VARCHAR2 
, PASSWORDHASH IN VARCHAR2 
, PHONENUMBER IN VARCHAR2 
, PHONENUMBERCONFIRMED IN VARCHAR2 
, TWOFACTORENABLED IN VARCHAR2 
, CREATED IN DATE
, qres out VARCHAR2
) 
AS 
    a VARCHAR2(5) := '' ;
    b VARCHAR2(5) := '' ;
    c VARCHAR2(5) := '' ;
BEGIN
    if EMAILCONFIRMED = 0  then 
        a := 'false';
        else
        a := 'true';
    end if;

    if PHONENUMBERCONFIRMED = 0  then 
        b := 'false';
         else
        b := 'true';
    end if;

    if TWOFACTORENABLED = 0  then 
        c := 'false';
        else
        c := 'true';
    end if;

INSERT INTO SiteUser 
(
	UserName, 
    NormalizedUserName, 
    Email,
    NormalizedEmail, 
    EmailConfirmed,
    Forename,
    Surname,
    PasswordHash,
    PhoneNumber, 
    PhoneNumberConfirmed, 
    TwoFactorEnabled,
	Created
 )
 VALUES
 (
	Username,
	NormalizedUserName,
	Email,
	NormalizedEmail,
	a,
	Forename,
	Surname,
	PasswordHash,
	PhoneNumber,
	b,
	c,
	TO_DATE (Created)
 );
qres := 'success'; 

END IDENTITY_INSERTUSER;



/
DROP PROCEDURE IDENTITY_ISUSERINROLE;
--/
CREATE PROCEDURE IDENTITY_ISUSERINROLE 
(
  R_ID IN NUMBER 
, U_ID IN NUMBER 
, res OUT SYS_REFCURSOR
) AS 
BEGIN
  OPEN res FOR 
    SELECT COUNT(*) FROM SiteUserRole 
    WHERE UserId = R_ID 
    AND RoleId = U_ID;

END IDENTITY_ISUSERINROLE;



/
DROP PROCEDURE IDENTITY_UPDATEROLE;
--/
CREATE PROCEDURE IDENTITY_UPDATEROLE
(R_ID IN number, R_Name IN VARCHAR2, R_NormalizedName IN VARCHAR2, R_Description IN VARCHAR2,res out SYS_REFCURSOR )
AS
BEGIN
  DBMS_OUTPUT.PUT_LINE('Sample output');
END;
/
DROP PROCEDURE IDENTITY_UPDATEUSER;
--/
CREATE PROCEDURE IDENTITY_UPDATEUSER 
(
  U_ID IN NUMBER   
, U_USERNAME IN VARCHAR2 
, U_NORMALIZEDUSERNAME IN VARCHAR2 
, U_FORENAME IN VARCHAR2 
, U_SURNAME IN VARCHAR2 
, U_EMAIL IN VARCHAR2 
, U_NORMALIZEDEMAIL IN VARCHAR2 
, U_EMAILCONFIRMED IN VARCHAR2 
, U_PASSWORDHASH IN VARCHAR2 
, U_PHONENUMBER IN VARCHAR2 
, U_PHONENUMBERCONFIRMED IN VARCHAR2 
, U_TWOFACTORENABLED IN VARCHAR2 
, qres out NVARCHAR2
) AS
     
    a VARCHAR2(5) := '' ;
    b VARCHAR2(5) := '' ;
    c VARCHAR2(5) := '' ;
BEGIN
    if U_EMAILCONFIRMED = 0  then 
        a := 'false';
        else
        a := 'true';
    end if;

    if U_PHONENUMBERCONFIRMED = 0  then 
        b := 'false';
         else
        b := 'true';
    end if;

    if U_TWOFACTORENABLED = 0  then 
        c := 'false';
        else
        c := 'true';
    end if;

UPDATE SiteUser SET

        UserName = U_Username,
        NormalizedUserName = U_NormalizedUserName,
        Email = U_Email,
        NormalizedEmail = U_NormalizedEmail, 
        EmailConfirmed =a,
        Forename = U_Forename,
        Surname = U_Surname,
        PasswordHash = U_PasswordHash,
        PhoneNumber = U_PhoneNumber,
        PhoneNumberConfirmed = b,
        TwoFactorEnabled = c 

        WHERE Id = U_ID ;
        qres := 'success' ;

END IDENTITY_UPDATEUSER;


/
DROP PROCEDURE PERMISSIONS_GETBYNAME;
--/
CREATE PROCEDURE PERMISSIONS_GETBYNAME 
(
  PERMISSIONNAME IN VARCHAR2 ,
  res out SYS_REFCURSOR
) AS 
BEGIN
	OPEN res FOR SELECT * FROM Permissions WHERE (Permissions.Name = PermissionName);
END PERMISSIONS_GETBYNAME;
/
DROP PROCEDURE PERMISSION_GET_ALL_BY_ROLE;
--/
CREATE PROCEDURE PERMISSION_GET_ALL_BY_ROLE 
(
  ROLE_ID IN NUMBER,
  res out SYS_REFCURSOR
) AS 
BEGIN
		OPEN res FOR SELECT * FROM RolePermission WHERE (RoleID = ROLE_ID);
END PERMISSION_GET_ALL_BY_ROLE;
/
DROP PROCEDURE PERMISSION_GET_BY_ID;
--/
CREATE PROCEDURE PERMISSION_GET_BY_ID 
(
  PERM_ID IN NUMBER
  , res out SYS_REFCURSOR
) AS 
BEGIN
  OPEN res FOR SELECT * FROM Permissions WHERE (ID = PERM_ID);

END PERMISSION_GET_BY_ID;
/
DROP PROCEDURE PERMISSION_USERHASPERMISSION;
--/
CREATE PROCEDURE PERMISSION_USERHASPERMISSION 
(
  ROLE_ID IN NUMBER 
, PERMISSION_ID IN NUMBER 
, res out SYS_REFCURSOR
) AS 
BEGIN
  	OPEn res FOR SELECT * FROM RolePermission 
    WHERE(RoleID =ROLE_ID AND PermissionID =PERMISSION_ID);
END PERMISSION_USERHASPERMISSION;
/
DROP TRIGGER BUILDING_TRG;
--/
CREATE TRIGGER BUILDING_TRG 
BEFORE INSERT ON BUILDING 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;



/
DROP TRIGGER BUILDING_TRG1;
--/
CREATE TRIGGER BUILDING_TRG1 
BEFORE INSERT ON BUILDING 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT BUILDING_SEQ1.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;



/
DROP TRIGGER COLLAGES_TRG;
--/
CREATE TRIGGER COLLAGES_TRG 
BEFORE INSERT ON COLLAGES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT COLLAGES_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;



/
DROP TRIGGER PERMISSIONS_TRG;
--/
CREATE TRIGGER PERMISSIONS_TRG 
BEFORE INSERT ON PERMISSIONS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT PERMISSIONS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;



/
DROP TRIGGER ROLEPERMISSION_TRG;
--/
CREATE TRIGGER ROLEPERMISSION_TRG 
BEFORE INSERT ON ROLEPERMISSION 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT ROLEPERMISSION_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;



/
DROP TRIGGER SITEUSER_TRG;
--/
CREATE TRIGGER SITEUSER_TRG 
BEFORE INSERT ON SITEUSER 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;



/
DROP TRIGGER SITEUSER_TRG1;
--/
CREATE TRIGGER SITEUSER_TRG1 
BEFORE INSERT ON SITEUSER 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT SITEUSER_SEQ1.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;



/
